name: OmniSharp-VSCode CI Release

on:
  workflow_run:
    workflows: ["OmniSharp-VSCode CI"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tags:
        description: 'Run this manually'
        required: false
        type: boolean

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Find Latest Successful CI Run
      id: find-ci-run
      uses: actions/github-script@v6
      with:
        script: |
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: "ci.yml",
            status: "success",
            per_page: 1
          });
          if (runs.data.workflow_runs.length === 0) {
            throw new Error("No successful workflow runs found");
          }
          return runs.data.workflow_runs[0].id;

    - name: Set Workflow Run ID
      run: echo "WORKFLOW_RUN_ID=${{ steps.find-ci-run.outputs.result }}" >> $GITHUB_ENV

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./vsix
        run-id: ${{ env.WORKFLOW_RUN_ID }}

    - name: Get package version
      run: node -e "console.log('VERSION=' + require('./package.json').version)" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          try {
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `Release ${process.env.VERSION}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput('upload_url', response.data.upload_url);
          } catch (error) {
            if (error.status === 422 && error.message.includes('already_exists')) {
              console.log('Release already exists. Retrieving existing release upload URL.');
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const existingRelease = releases.data.find(release => release.tag_name === `v${process.env.VERSION}`);
              if (existingRelease) {
                core.setOutput('upload_url', existingRelease.upload_url);
              } else {
                throw new Error('Release exists but could not find it.');
              }
            } else {
              throw error;
            }
          }

    - name: Upload release build (darwin-x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vsix/csharp-darwin-x64.vsix
        asset_name: csharp-darwin-x64-${{ env.VERSION }}.vsix
        asset_content_type: application/zip

    - name: Upload release build (linux-x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vsix/csharp-linux-x64.vsix
        asset_name: csharp-linux-x64-${{ env.VERSION }}.vsix
        asset_content_type: application/zip

    - name: Upload release build (win32-x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vsix/csharp-win32-x64.vsix
        asset_name: csharp-win32-x64-${{ env.VERSION }}.vsix
        asset_content_type: application/zip

    - name: Upload release build (platform-neutral)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vsix/csharp-platform-neutral.vsix
        asset_name: csharp-platform-neutral-${{ env.VERSION }}.vsix
        asset_content_type: application/zip