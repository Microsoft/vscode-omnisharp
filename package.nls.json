{
  "configuration.dotnet.defaultSolution.description": "The path of the default solution to be opened in the workspace, or set to 'disable' to skip it.",
  "csharp.debug.program": "Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: `${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)`\n\nExample: `${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll`\n\nWhere:\n`(target-framework)` is the framework that the debugged project is being built for. This is normally found in the project file as the `TargetFramework` property.\n\n`(project-name.dll)` is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.",
  "csharp.debug.cwd": "Path to the working directory of the program being debugged. Default is the current workspace.",
  "csharp.debug.stopAtEntry": "If true, the debugger should stop at the entry point of the target. This option defaults to `false`.",
  "csharp.debug.launchBrowser": "Describes options to launch a web browser as part of launch",
  "csharp.debug.launchBrowser.enabled": "Whether web browser launch is enabled. This option defaults to `true`.",
  "csharp.debug.launchBrowser.args": "The arguments to pass to the command to open the browser. This is used only if the platform-specific element (`osx`, `linux` or `windows`) doesn't specify a value for `args`. Use ${auto-detect-url} to automatically use the address the server is listening to.",
  "csharp.debug.launchBrowser.osx": "OSX-specific web launch configuration options. By default, this will start the browser using `open`.",
  "csharp.debug.launchBrowser.osx.command": "The executable which will start the web browser.",
  "csharp.debug.launchBrowser.osx.args": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
  "csharp.debug.launchBrowser.linux": "Linux-specific web launch configuration options. By default, this will start the browser using `xdg-open`.",
  "csharp.debug.launchBrowser.linux.command": "The executable which will start the web browser.",
  "csharp.debug.launchBrowser.linux.args": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
  "csharp.debug.launchBrowser.windows": "Windows-specific web launch configuration options. By default, this will start the browser using `cmd /c start`.",
  "csharp.debug.launchBrowser.windows.command": "The executable which will start the web browser.",
  "csharp.debug.launchBrowser.windows.args": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
  "csharp.debug.env": "Environment variables passed to the program.",
  "csharp.debug.envFile": "Environment variables passed to the program by a file. E.g. `${workspaceFolder}/.env`",
  "csharp.debug.console": "When launching console projects, indicates which console the target program should be launched into.",
  "csharp.debug.externalConsole": "Attribute `externalConsole` is deprecated, use `console` instead. This option defaults to `false`.",
  "csharp.debug.launchSettingsFilePath": "The path to a launchSettings.json file. If this isn't set, the debugger will search in `{cwd}/Properties/launchSettings.json`.",
  "csharp.debug.launchSettingsProfile": "If specified, indicates the name of the profile in launchSettings.json to use. This is ignored if launchSettings.json is not found. launchSettings.json will be read from the path specified should be the 'launchSettingsFilePath' property, or {cwd}/Properties/launchSettings.json if that isn't set. If this is set to null or an empty string then launchSettings.json is ignored. If this value is not specified the first 'Project' profile will be used.",
  "csharp.debug.sourceFileMap": "Maps build-time paths to local source locations. All instances of build-time path will be replaced with the local source path.\n\nExample:\n\n`{\"<build-path>\":\"<local-source-path>\"}`",
  "csharp.debug.justMyCode": "When enabled (the default), the debugger only displays and steps into user code (\"My Code\"), ignoring system code and other code that is optimized or that does not have debugging symbols. [More information](https://aka.ms/VSCode-CS-LaunchJson#just-my-code)",
  "csharp.debug.requireExactSource": "Flag to require current source code to match the pdb. This option defaults to `true`.",
  "csharp.debug.enableStepFiltering": "Flag to enable stepping over Properties and Operators. This option defaults to `true`.",
  "csharp.debug.logging": "Flags to determine what types of messages should be logged to the output window.",
  "csharp.debug.logging.exceptions": "Flag to determine whether exception messages should be logged to the output window. This option defaults to `true`.",
  "csharp.debug.logging.moduleLoad": "Flag to determine whether module load events should be logged to the output window. This option defaults to `true`.",
  "csharp.debug.logging.programOutput": "Flag to determine whether program output should be logged to the output window when not using an external console. This option defaults to `true`.",
  "csharp.debug.logging.engineLogging": "Flag to determine whether diagnostic engine logs should be logged to the output window. This option defaults to `false`.",
  "csharp.debug.logging.browserStdOut": "Flag to determine if stdout text from the launching the web browser should be logged to the output window. This option defaults to `true`.",
  "csharp.debug.logging.elapsedTiming": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took. This option defaults to `false`.",
  "csharp.debug.logging.threadExit": "Controls if a message is logged when a thread in the target process exits. This option defaults to `false`.",
  "csharp.debug.logging.processExit": "Controls if a message is logged when the target process exits, or debugging is stopped. This option defaults to `true`.",
  "csharp.debug.pipeTransport": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
  "csharp.debug.pipeTransport.pipeCwd": "The fully qualified path to the working directory for the pipe program.",
  "csharp.debug.pipeTransport.pipeProgram": "The fully qualified pipe command to execute.",
  "csharp.debug.pipeTransport.debuggerPath": "The full path to the debugger on the target machine.",
  "csharp.debug.pipeTransport.pipeEnv": "Environment variables passed to the pipe program.",
  "csharp.debug.pipeTransport.quoteArgs": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
  "csharp.debug.pipeTransport.windows": "Windows-specific pipe launch configuration options",
  "csharp.debug.pipeTransport.windows.pipeCwd": "The fully qualified path to the working directory for the pipe program.",
  "csharp.debug.pipeTransport.windows.pipeProgram": "The fully qualified pipe command to execute.",
  "csharp.debug.pipeTransport.windows.quoteArgs": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
  "csharp.debug.pipeTransport.windows.pipeEnv": "Environment variables passed to the pipe program.",
  "csharp.debug.pipeTransport.osx": "OSX-specific pipe launch configuration options",
  "csharp.debug.pipeTransport.osx.pipeCwd": "The fully qualified path to the working directory for the pipe program.",
  "csharp.debug.pipeTransport.osx.pipeProgram": "The fully qualified pipe command to execute.",
  "csharp.debug.pipeTransport.osx.quoteArgs": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
  "csharp.debug.pipeTransport.osx.pipeEnv": "Environment variables passed to the pipe program.",
  "csharp.debug.pipeTransport.linux": "Linux-specific pipe launch configuration options",
  "csharp.debug.pipeTransport.linux.pipeCwd": "The fully qualified path to the working directory for the pipe program.",
  "csharp.debug.pipeTransport.linux.pipeProgram": "The fully qualified pipe command to execute.",
  "csharp.debug.pipeTransport.linux.quoteArgs": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
  "csharp.debug.pipeTransport.linux.pipeEnv": "Environment variables passed to the pipe program.",
  "csharp.debug.suppressJITOptimizations": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. [More information](https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations)",
  "csharp.debug.symbolOptions": "Options to control how symbols (.pdb files) are found and loaded.",
  "csharp.debug.symbolOptions.searchPaths": "Array of symbol server URLs (example: http\u200b://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
  "csharp.debug.symbolOptions.searchMicrosoftSymbolServer": "If 'true' the Microsoft Symbol server (https\u200b://msdl.microsoft.com\u200b/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
  "csharp.debug.symbolOptions.searchNuGetOrgSymbolServer": "If 'true' the NuGet.org symbol server (https\u200b://symbols.nuget.org\u200b/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
  "csharp.debug.symbolOptions.cachePath": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
  "csharp.debug.symbolOptions.moduleFilter": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
  "csharp.debug.symbolOptions.moduleFilter.mode": "Controls which of the two basic operating modes the module filter operates in.",
  "csharp.debug.symbolOptions.moduleFilter.excludedModules": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
  "csharp.debug.symbolOptions.moduleFilter.includedModules": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
  "csharp.debug.symbolOptions.moduleFilter.includeSymbolsNextToModules": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
  "csharp.debug.sourceLinkOptions": "Options to control how Source Link connects to web servers. [More information](https://aka.ms/VSCode-CS-LaunchJson#source-link-options)",
  "csharp.debug.allowFastEvaluate": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
  "csharp.debug.targetOutputLogPath": "When set, text that the target application writes to stdout and stderr (ex: Console.WriteLine) will be saved to the specified file. This option is ignored if console is set to something other than internalConsole. E.g. '${workspaceFolder}/out.txt'",
  "csharp.debug.targetArchitecture": "[Only supported in local macOS debugging]\n\nThe architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are `x86_64` or `arm64`.",
  "csharp.debug.checkForDevCert": "If you are launching a web project on Windows or macOS and this is enabled, the debugger will check if the computer has a self-signed HTTPS certificate used to develop web servers running on https endpoints. If unspecified, defaults to true when `serverReadyAction` is set. This option does nothing on Linux, VS Code remote, and VS Code Web UI scenarios. If the HTTPS certificate is not found or isn't trusted, the user will be prompted to install/trust it.",
  "csharp.debug.processName": "The process name to attach to. If this is used, `processId` should not be used.",
  "console.internalConsole": "Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine).",
  "console.integratedTerminal": "VS Code's integrated terminal.",
  "console.externalTerminal": "External terminal that can be configured via user settings.",
  "mode.loadAllButExcluded": "Load symbols for all modules unless the module is in the 'excludedModules' array.",
  "mode.loadOnlyIncluded": "Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting.",
  "csharp.debug.console.internalConsole": "Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine).",
  "csharp.debug.console.integratedTerminal": "VS Code's integrated terminal.",
  "csharp.debug.console.externalTerminal": "External terminal that can be configured via user settings.",
  "csharp.debug.symbolOptions.moduleFilter.mode.loadAllButExcluded": "Load symbols for all modules unless the module is in the 'excludedModules' array.",
  "csharp.debug.symbolOptions.moduleFilter.mode.loadOnlyIncluded": "Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
}