trigger: none
pr: none

resources:
  pipelines:
    - pipeline: releaseCI
      source: dotnet-vscode-csharp
      trigger:
        branches:
          include:
            - prerelease
            - release

# Only used when manually run
parameters:
  - name: test
    type: boolean
    default: true
  - name: branch
    type: string
    default: prerelease
    values:
    - prerelease
    - release

variables:
# This is expected to provide VisualStudioMarketplacePAT to the release (https://code.visualstudio.com/api/working-with-extensions/publishing-extension#get-a-personal-access-token)
- group: vscode-csharp release secrets

jobs:
- job: PublishToMarketplace
  pool:
    vmImage: ubuntu-latest
  steps:
  - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
    - task: DownloadPipelineArtifact@2
      displayName: '[Manual release]ðŸ“¦ Download artifacts from build pipeline. .'
      inputs:
        buildType: 'specific'
        project: 'internal'
        definition: 1264
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/${{ parameters.branch }}'
  - ${{ elseif eq(variables['Build.Reason'], 'ResourceTrigger') }}:
    - task: DownloadPipelineArtifact@2
      displayName: '[Auto release]ðŸ“¦ Download artifacts from build pipeline. .'
      inputs:
        buildType: 'specific'
        project: 'internal'
        definition: 1264
        buildVersionToDownload: 'latestFromBranch'
        branchName: '$(resources.pipeline.releaseCI.sourceBranch)'
  - ${{ else }}:
    - pwsh: |
        Write-Host "##vso[task.logissue type=error]Release should only be triggered by build pipeline or manually run."; Exit 1
  - pwsh: |
      npm install --global vsce
    displayName: 'Install vsce'
  - pwsh: |
      function Publish-To-Marketplace() {
        param(
          [bool]$PublishToPreRelease,
          [bool]$Test
        )
        # Our build pipeline would generated build based on attempt number. Publishing the latest attempt.
        $allArtifacts = Get-ChildItem -Path "VSIXs - Attempt*" | Sort-Object -Descending
        if ($allArtifacts.Length -eq 0) {
          throw "No Artifacts is downloaded."
        }

        $publishArtifacts = $allArtifacts[0]
        Write-Host "All artifacts: $($allArtifacts). Publishing $($publishArtifacts)."

        $additionalPublishArgs = , "publish"
        # Artifacts are published to either pre-release or release based on the build branch, https://code.visualstudio.com/api/working-with-extensions/publishing-extension#prerelease-extensions

        If($PublishToPreRelease)  {
          $additionalPublishArgs += "--pre-release"
          Write-Host "Publish to pre-release channel."
        } Else {
          Write-Host "Publish to release channel."
        }

        $additionalPublishArgs += '--packagePath'

        $platforms = "arm64", "x64", "ia32"
        $allVsixs = Get-ChildItem $publishArtifacts *.vsix
        foreach ($vsix in $allVsixs) {
          foreach ($plat in $platforms) {
            if ($vsix.Name.Contains($plat)) {
                $additionalPublishArgs += $vsix
            }
          }
        }

        Write-Host "Command run is: vsce $($additionalPublishArgs)."
        If ($Test) {
          Write-Host "In test mode, command is printed instead of run."
          Write-Host "ðŸ”’ Verify PAT."
          vsce verify-pat ms-dotnettools
        }
        Else {
          vsce @additionalPublishArgs
        }
      }

      $isInTestMode = ("$(Build.Reason)" -eq "Manual") -and "${{ parameters.test }}";
      $prereleaseArtifacts
      if (("$(Build.Reason)" -eq "Manual") -and ("${{ parameters.branch }}" -eq "prerelease")) {
        $prereleaseArtifacts = $true;
      } elseif (("$(Build.Reason)" -eq "Manual") -and ("${{ parameters.branch }}" -eq "release")) {
        $prereleaseArtifacts = $false;
      }
      elseif (("$(Build.Reason)" -eq "ResourceTrigger") -and ("$(resources.pipeline.releaseCI.sourceBranch)" -eq "refs/heads/prerelease")) {
        $prereleaseArtifacts = $true;
      }
      elseif (("$(Build.Reason)" -eq "ResourceTrigger") -and ("$(resources.pipeline.releaseCI.sourceBranch)" -eq "refs/heads/release")) {
        $prereleaseArtifacts = $false;
      }
      else {
        Write-Host "##vso[task.logissue type=error] Unexpected $(Build.Reason), ${{ parameters.branch }} and $(resources.pipeline.releaseCI.sourceBranch).";
        Exit 1
      }

      Publish-To-Marketplace -PublishToPreRelease $prereleaseArtifacts -Test $isInTestMode;
    displayName: ðŸš€ Publish to Marketplace
    workingDirectory: $(Pipeline.Workspace)
    env:
      VSCE_PAT: $(VSCodeMarketplacePAT)
