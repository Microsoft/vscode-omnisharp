trigger: none
pr: none

resources:
  pipelines:
  - pipeline: officialBuildCI
    source: dotnet-vscode-csharp
    branch: main

parameters:
  - name: test
    type: boolean
    default: true

variables:
# This is expected to provide VisualStudioMarketplacePAT to the release (https://code.visualstudio.com/api/working-with-extensions/publishing-extension#get-a-personal-access-token)
- group: vscode-csharp release secrets
# This is expected to provide pat to tag release.
- group: DncEng-Partners-Tokens

stages:
- stage: PublishStage
  jobs:
  - deployment: PublishToMarketplace
    displayName: PublishToMarketplace
    environment: vscode-csharp-release-approvals
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - download: 'none'
          - task: DownloadPipelineArtifact@2
            displayName: 'ðŸ“¦ Download artifacts from build pipeline.'
            inputs:
              buildType: 'specific'
              project: 'internal'
              definition: 1264
              buildVersionToDownload: 'specific'
              buildId: '$(resources.pipeline.officialBuildCI.runID)'
              branchName: '$(resources.pipeline.officialBuildCI.sourceBranch)'
          - pwsh: |
              npm install --global vsce
            displayName: 'Install vsce'
          - pwsh: |
              # Our build pipeline would generated build based on attempt number. Publishing the latest attempt.
              $allArtifacts = Get-ChildItem -Path "VSIXs - Attempt*" | Sort-Object -Descending
              if ($allArtifacts.Length -eq 0) {
                throw "No Artifacts is downloaded."
              }

              $publishArtifacts = $allArtifacts[0]
              Write-Host "All artifacts: $($allArtifacts). Publishing $($publishArtifacts)."

              $basePublishArgs = , "publish"
              # Artifacts are published to either pre-release or release based on the build branch, https://code.visualstudio.com/api/working-with-extensions/publishing-extension#prerelease-extensions
              If ("$(resources.pipeline.officialBuildCI.sourceBranch)" -eq "refs/heads/main") {
                $basePublishArgs += "--pre-release"
                Write-Host "Publish to pre-release channel."
              } ElseIf ("$(resources.pipeline.officialBuildCI.sourceBranch)" -eq "refs/heads/release") {
                Write-Host "Publish to release channel."
              } Else {
                throw "Unexpected branch name: $(resources.pipeline.officialBuildCI.sourceBranch)."
              }
              $basePublishArgs += '--packagePath'

              # Publish win32-ia32 last as recommended at https://code.visualstudio.com/api/working-with-extensions/publishing-extension#platformspecific-extensions
              # Since validation is done asynchronously, we further take care to push the win32 variants in the first batch *first*,
              # to give them the longest lead time possible before the second batch with just the win32-ia32 vsix is published.
              $nonIA32PlatformArgs = $basePublishArgs + (Get-ChildItem $publishArtifacts\*.vsix -Include *x64*, *arm64* | Sort-Object Name -Descending |% { $_ })
              $ia32PlatformArgs = $basePublishArgs + (Get-ChildItem $publishArtifacts\*.vsix -Include *ia32* | Sort-Object Name -Descending |% { $_ })

              If ("${{ parameters.test }}" -eq "true") {
                Write-Host "In test mode, command is printed instead of run."
                Write-Host "##[command]vsce $nonIA32PlatformArgs"
                Write-Host "##[command]vsce $ia32PlatformArgs"

                Write-Host "ðŸ”’ Verify PAT."
                vsce verify-pat ms-dotnettools
              }
              Else {
                Write-Host "##[command]vsce $nonIA32PlatformArgs"
                vsce @nonIA32PlatformArgs
                Write-Host "##[command]vsce $ia32PlatformArgs"
                vsce @ia32PlatformArgs
              }
            displayName: ðŸš€ Publish to Marketplace
            workingDirectory: $(Pipeline.Workspace)
            env:
              VSCE_PAT: $(VSCodeMarketplacePAT)
- stage: 'TagRelease'
  displayName: 'Tag release of vscode-csharp'
  dependsOn: 'PublishStage'
  condition: succeeded('PublishStage')
  jobs:
  - job: 'Tag'
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js 18.x'
      inputs:
        versionSpec: '18.x'
    - checkout: self
      clean: true
      submodules: true
      fetchTags: false
      fetchDepth: 0
    - pwsh: |
        git checkout $(resources.pipeline.officialBuildCI.sourceCommit)
      displayName: 'Checkout build source branch'
    - pwsh: |
        npm ci
        npm install
        npm install -g gulp
        gulp installDependencies
      displayName: 'Install dependencies.'
    - pwsh: |
        # build number is generated by nerdbank git versioning and set to AzureDev
        gulp createTags --releaseVersion $(resources.pipeline.officialBuildCI.runName) --releaseCommit $(resources.pipeline.officialBuildCI.sourceCommit) --dryRun ${{ parameters.test }}
      env:
        GitHubPAT: $(BotAccount-dotnet-bot-content-rw-grained-pat)
      displayName: 'Create release tags'
