trigger: none
pr: none

parameters:
  - name: test-run
    type: boolean
    default: true
  - name: branch
    type: string
    default: prerelease
    values:
    - prerelease
    - release

variables:
# This is expected to provide VisualStudioMarketplacePAT to the release (https://code.visualstudio.com/api/working-with-extensions/publishing-extension#get-a-personal-access-token)
- group: vscode-csharp release secrets

jobs:
- job: PublishToMarketplace
  pool:
    vmImage: ubuntu-latest
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'ðŸ“¦ Download artifacts from build pipeline.'
    inputs:
      buildType: 'specific'
      project: 'internal'
      definition: 1264
      buildVersionToDownload: 'latestFromBranch'
      branchName: 'refs/heads/${{ parameters.branch }}'
  - pwsh: |
      npm install --global vsce
    displayName: 'Install vsce'
  - pwsh: |
      # Our build pipeline would generated build based on attempt number. Publishing the latest attempt.
      $allArtifacts = Get-ChildItem -Path "VSIXs - Attempt*" | Sort-Object -Descending
      if ($allArtifacts.Length -eq 0) {
        throw "No Artifacts is downloaded."
      }

      $publishArtifacts = $allArtifacts[0]
      Write-Host "All artifacts: $($allArtifacts). Publishing $($publishArtifacts)."

      $additionalPublishArgs = "publish","--skip-duplicate"
      # Artifacts are published to either pre-release or release based on the build branch, https://code.visualstudio.com/api/working-with-extensions/publishing-extension#prerelease-extensions
      If ("${{ parameters.branch }}" -eq "prerelease") {
        $additionalPublishArgs += "--pre-release"
        Write-Host "Publish to pre-release channel."
      } ElseIf ("${{ parameters.branch }}" -eq "release") {
        Write-Host "Publish to release channel."
      } Else {
        throw "Unexpected branch name: ${{ parameters.branch }}."
      }

      $additionalPublishArgs += '--packagePath'
      $additionalPublishArgs += Get-ChildItem $publishArtifacts *.vsix

      if ($({ parameters.test-run })) {
        Write-Host "In test mode, command is printed instead of run."
        Write-Host "Command run is: vsce $($additionalPublishArgs)."
        Write-Host "ðŸ”’ Verify PAT."
        vsce verify-pat ms-dotnettools
      }
      else {
        vsce @additionalPublishArgs
      }
    displayName: ðŸš€ Publish to Marketplace
    workingDirectory: $(Pipeline.Workspace)
    env:
      VSCE_PAT: $(VSCodeMarketplacePAT)
